# -*- coding: utf-8 -*-
"""DATA Visualization and Cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ImTrsPrTq7OvO0dutuR2sy2CS7JZUGFV
"""

import numpy as np
import keras
import tensorflow as tf
from keras.layers import Input,Conv2D,MaxPooling2D,Flatten,Activation,BatchNormalization,UpSampling2D 
from keras.layers import Dropout,GlobalAveragePooling2D,LeakyReLU,Dense,Reshape, concatenate,Conv2DTranspose
from keras.models import Model,load_model
import matplotlib.pyplot as plt
import keras.backend as K



import os
import time
from datetime import datetime


from keras.applications import InceptionResNetV2
from keras.callbacks import TensorBoard

from keras.optimizers import Adam
from keras.utils import to_categorical
from keras_preprocessing import image

from numpy import asarray
from numpy import vstack

from tensorflow.keras.utils import img_to_array

from keras.preprocessing.image import load_img
from numpy import savez_compressed


import pandas as pd

import os

from matplotlib import pyplot

from numpy import load

from random import random
from numpy import load
from numpy import zeros
from numpy import ones
from numpy import asarray
from numpy.random import randint
from keras.optimizers import Adam

config = tf.ConfigProto()
config.gpu_options.allow_growth = True

keras.backend.tensorflow_backend.set_session(tf.Session(config=config))

import deeplake
ds = deeplake.load("hub://activeloop/ffhq")

data=[]

for filename in os.listdir('./FFHQ'):
  parts=filename.split('_')
  #print(parts[3])
  item={}
  item['image']=filename
  item['age']=parts[0]
  item['gender']=parts[1]
  item['race']=parts[2]
  if (len(parts)==4):
    item['date_time']=parts[3]
  data.append(item)
  
FFHQ_data=pd.DataFrame(data)  
FFHQ_data.describe()  

FFHQ_data.info()

FFHQ_data.head()

del FFHQ_data['date_time']

def age_cat_fn(age):
  age=int(age)
  
  if (0<age<18):
    return 0
  elif(18<=age<=25):
    return 1
  elif (25<age<=39):
    return 2
  elif (39< age <=49):
    return 3
  elif (49 < age <=60):
    return 4
  elif age>60:
    return 5
    
FFHQ_data['age_cat']=FFHQ_data.age.map(age_cat_fn)


FFHQ_data.to_csv('FFHQ_data.csv',sep=',')
!cp 'FFHQ_data.csv' '/content/drive/My Drive/EIP3/session7'

FFHQ_data.head()

data_A=FFHQ_data[FFHQ_data.age_cat==1]
data_B=FFHQ_data[FFHQ_data.age_cat==4]

print(data_A['age_cat'].count())
print(data_B['age_cat'].count())

import pandas as pd

import os

FFHQ_data=pd.read_csv('FFHQ_data.csv')

image_dir='./FFHQ/'


image_paths_A = data_A['image'].tolist()
image_paths_B = data_B['image'].tolist()

#print(image_paths[:10])

images_A=None
images_B=None
#store 2000 images for A
for i, image_path in enumerate(image_paths_A):
  if (i<2000):
    if (i%1000==0):
      print("processing set A image num "+str(i))
    try:
      # Load image
      loaded_image = image.load_img(image_dir+image_path, target_size=(128,128,3))

      # Convert PIL image to numpy ndarray
      loaded_image = image.img_to_array(loaded_image)

      # Add another dimension (Add batch dimension)
      loaded_image = np.expand_dims(loaded_image, axis=0)

      # Concatenate all images into one tensor
      if images_A is None:
        images_A = loaded_image
      else:
        images_A = np.concatenate([images_A, loaded_image], axis=0)
    except Exception as e:
      print("Error:", i, e)

#store 2000 images for B
for i, image_path in enumerate(image_paths_B):
  if (i<2000):
    if (i%999==0):
      print("processing set B image num "+str(i))
    try:
      # Load image
      loaded_image = image.load_img(image_dir+image_path, target_size=(128,128,3))

      # Convert PIL image to numpy ndarray
      loaded_image = image.img_to_array(loaded_image)

      # Add another dimension (Add batch dimension)
      loaded_image = np.expand_dims(loaded_image, axis=0)

      # Concatenate all images into one tensor
      if images_B is None:
        images_B = loaded_image
      else:
        images_B = np.concatenate([images_B, loaded_image], axis=0)
    except Exception as e:
      print("Error:", i, e)   

 

print('images_A :') 
print(images_A.shape)  
print('images_B :')
print(images_B.shape)

from numpy import load
from matplotlib import pyplot
# load the dataset
data = load('/content/drive/My Drive/EIP3/session7/FFHQ_128.npz')
dataA, dataB = data['arr_0'], data['arr_1']
print('Loaded: ', dataA.shape, dataB.shape)
# plot source images
n_samples = 3
for i in range(n_samples):
	pyplot.subplot(2, n_samples, 1 + i)
	pyplot.axis('off')
	pyplot.imshow(dataA[i].astype('uint8'))
# plot target image
for i in range(n_samples):
	pyplot.subplot(2, n_samples, 1 + n_samples + i)
	pyplot.axis('off')
	pyplot.imshow(dataB[i].astype('uint8'))
pyplot.show()